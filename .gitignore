import tkinter as tk

# variables to be mainly used
running_time = False
hours, minutes, seconds, milliseconds = 0, 0, 0, 0
i = 0
j = 0

# start, pause, lap, and resume functions
# start function
def start():
    global running_time
    if not running_time:
        running_time_animation()
        running_time = True
    # if start button is clicked, then the start button will be replaced into pause and lap button
    start_button.place_forget()
    pause_button.place(x=415,y=120, width=190, height=100)
    lap_button.place(x=215,y=120, width=190, height=100)

# pause function
def pause():
    global running_time
    if running_time:
        # cancel updating of time using after_cancel()
        stopwatch.after_cancel(running_animation_time)
        running_time = False
    # if pause button is clicked, then the pause button will be replaced into resume and reset button
    pause_button.place_forget()
    lap_button.place_forget()
    resume_button.place(x=415,y=120, width=190, height=100)
    reset_button.place(x=215,y=120, width=190, height=100)
    
# resume function 
def resume():
    global running_time
    if not running_time:
        running_time_animation()
        running_time = True
    # if resume button is clicked, then the resume button will be replaced into pause and lap button
    resume_button.place_forget()
    reset_button.place_forget()
    pause_button.place(x=415,y=120, width=190, height=100)
    lap_button.place(x=215,y=120, width=190, height=100)
    
# reset function
def reset():
    global running_time
    if running_time:
        # cancelling updating of time using after_cancel()
        stopwatch.after_cancel(running_animation_time)
        running_time = False
        
    # set variables back to zero
    global hours, minutes, seconds, milliseconds
    hours, minutes, seconds, milliseconds = 0, 0, 0, 0
    
    # set label back to zero
    stopwatch.config(text="00:00:00")
    
    # if reset button is clicked, then the resume button or pause button will be replaced into start button
    wig=root.winfo_children()
    for b in wig:
        b.place_forget()
    start_button.place(x=315,y=120, width=190, height=100)
    
# lap function
def lap():
    global hours, minutes, seconds, i, j
    if i<8:
        lap_label ((str(hours).zfill(2)+ ":" + str(minutes).zfill(2) + ":" + str(seconds).zfill(2)) + "." + str(milliseconds).zfill(2), 20+(100*i), 400+(j*50))
    else:
        j+=1
        i=0
        lap_label ((str(hours).zfill(2) + ":" + str(minutes).zfill(2) + ":" + str(seconds).zfill(2)) + "." + str(milliseconds).zfill(2), 20+(100*i), 400+(j*50))
    i+=1

# label for lap function
def lap_label(text,_x,_y):
    global label
    label = tk.Label(text=text, fg="black", bg="white", font=("Arial",10,"bold"))
    label_frame.place(x = 15, y = 230, width=785, height=40)
    label.place(x=_x, y=235 , width=70, height=30)
    
# updating the stopwatch function
def running_time_animation():
    global hours, minutes, seconds, milliseconds
    milliseconds += 1
    if milliseconds == 100:
        seconds += 1
        milliseconds = 0
    if seconds == 60:
        minutes += 1
        seconds = 0
    if minutes == 60:
        hours += 1
        minutes = 0
    # including zero (0) in stopwatch when hours, minutes, or seconds is single digit number
    hours_str = f"{hours}" if hours > 9 else f"0{hours}"
    minutes_str = f"{minutes}" if minutes > 9 else f"0{minutes}"
    seconds_str = f"{seconds}" if seconds > 9 else f"0{seconds}"
    milliseconds_str = f"{milliseconds}" if milliseconds > 9 else f"0{milliseconds}"
    
    # running_time_animation timer configuration updating after each millisecond
    stopwatch.config(text=hours_str + ":" + minutes_str + ":" + seconds_str + "." + milliseconds_str)
    
    # call the running_time_animation function
    global running_animation_time
    running_animation_time = stopwatch.after(9, running_time_animation)
    
    
# creating the main window
root = tk.Tk()
root.configure(bg= "burlywood2")
root.geometry("820x280")
root.title("CODEgo Stopwatch")

# creating the frame for the lap time labels
label_frame = tk.Frame(root, bg="white")

# label to display the time
stopwatch = tk.Label(bg= "burlywood2", text="00:00:00", font=("Arial", 80))
stopwatch.pack()

# creating start, pause, reset, quit buttons
start_button = tk.Button(bg= "burlywood4", text="start", borderwidth=0, font=("Arial", 20, "bold"), command=start)
reset_button = tk.Button(bg= "burlywood4", text="reset", borderwidth=0, font=("Arial", 20, "bold"), command=reset)
lap_button = tk.Button(bg= "burlywood4", text="lap", borderwidth=0, font=("Arial", 20, "bold"), command=lap)
pause_button = tk.Button(bg= "burlywood4", text="pause", borderwidth=0, font=("Arial", 20, "bold"), command=pause)
resume_button = tk.Button(bg= "burlywood4", text="resume", borderwidth=0, font=("Arial", 20, "bold"), command=resume)

# placing start, pause, reset, quit buttons
start_button.place(x=315,y=120, width=190, height=100)

# run app again
root.mainloop()

